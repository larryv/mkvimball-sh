#!/bin/sh -

# mkvimball-sh 0.0 - Shell rewrite of Charles E. Campbell's "mkvimball"
# ---------------------------------------------------------------------
#
# SPDX-License-Identifier: CC0-1.0
#
# Written in 2022 by Lawrence Vel√°zquez <vq@larryv.me>.
#
# To the extent possible under law, the author(s) have dedicated all
# copyright and related and neighboring rights to this software to the
# public domain worldwide.  This software is distributed without any
# warranty.
#
# You should have received a copy of the CC0 Public Domain Dedication
# along with this software.  If not, see
# <https://creativecommons.org/publicdomain/zero/1.0/>.


lf='
'
tab='	'
IFS=" $tab$lf"

if test "$#" -lt 1; then
            cat >&2 <<EOF
usage: mkvimball-sh archive [file ...]
EOF
            exit 1
fi

exec >"$1"
shift

    # Use an older header for backward compatibility.
    cat <<\EOF || exit "$?"
" Vimball Archiver by Charles E. Campbell, Jr., Ph.D.
UseVimball
finish
EOF

# Imitate pax(1) by reading <LF>-terminated input pathnames from
# standard input in the absence of operands [3].
case $# in
    0) sed 's/\\/\\\\/g' ;;
    *) : ;;
esac | while
    # Standard input is not passed through if there are operands, so the
    # "0" case terminates both methods of obtaining input pathnames.
    case $# in
        0) IFS= read filepath || test "x$filepath" != x ;;
        *) filepath=$1; shift ;;
    esac
do
    # Some wc(1) implementations (i.e., macOS) pad the output.
    filelinecount=`wc -l <"$filepath" | tr -d '[:blank:]'` || exit "$?"
    test "x$filelinecount" != x || exit "$?"

    cat - "$filepath" <<EOF || exit "$?"
${filepath}${tab}[[[1
$filelinecount
EOF
done


# References:
#  3. https://pubs.opengroup.org/onlinepubs/9699919799/utilities/pax.html
